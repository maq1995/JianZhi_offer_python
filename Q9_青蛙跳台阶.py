# encoding: utf-8
"""
 @project:JianZhi_offer
 @author: Ma Qian
 @language:Python 2.7.2 
 @time: 2019/8/20 下午2:35
 @desc:
"""
'''
题目：一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级台阶总共有多少种跳法。
'''
'''
这个题目就是斐波那契数列的一个应用。
分析：
    首先考虑最简单的情况，如果只有1级台阶，那显然只有一种跳法
                      如果有2级台阶，那就有2种跳法了：一种是分两次跳，每次跳1级，另一种是一次跳2级
    接着考虑一般情况，当n>2时，我们将跳法的次数用f(n)表示，
        第一次跳的时候就有两种不同的选择：一是第一次只跳1级，此时跳法的数目f(n)等于后面剩下的n-1级台阶的跳法数目，即f(n-1)
                                    二是第一次跳2级，此时跳法的数目f(n)等于后面剩下的n-2级台阶的跳法数目，即f(n-2)
                    因此n级台阶的不同跳法的总数 f(n) = f(n-1) + f(n-2)  
                    实际上就是斐波那契数列了。
                    
'''


def fog_jump_floor(num):
    n, a, b = 0, 0, 1
    if num <= 0:
        return a
    while n < num:
        # yield b
        a, b = b, a+b
        n += 1
    return b


# print fog_jump_floor(1)


'''
本题扩展：把条件改成：一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶......也可以跳上n级台阶。
        此时该青蛙跳上一个n级的台阶总共有多少种跳法？
        
解析：
    第一级台阶有n种跳法：跳1级、跳2级、....、跳n级
    此时 f(n) = f(n-1) + f(n-2) + ... + f(1) + f(0)     ,其中f(0) = 0
    而 f(n-1) = f(n-2) + f(n-3) + ...+ f(1)
    则 f(n) = 2 * f(n-1)
    
    以此类推 f(n-1) = 2*f(n-2) ....
    则 f(n) = 2^(n-i) * f(n-(n-i))
            = 2^(n-1) * f(1)
            = 2^(n-1)
'''


def fog_jump_floor2(nums):
    # return 2**(nums-1) < 0 ? 0 :2**(nums-1) # python中没有三元表达式
    h = 2**(nums-1)
    if h < 1:
        return 0
    else:
        return h

print fog_jump_floor2(5)
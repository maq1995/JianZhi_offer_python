# encoding: utf-8
"""
 @project:JianZhi_offer
 @author: Ma Qian
 @language:Python 2.7.2 
 @time: 2019/9/18 下午3:15
 @desc:
"""
'''
题目：写一个函数，求两个整数之和。要求在函数体内不得使用+、—、×、/四则运算符号。

解析：
    先看十进制的加法：5+17=22，分为三步：第一步：各个位相加，不进位，此时5+17 = 12， 第二步：做进位，5+7中有进位，进位的
值是10，第三步：12+10=22.
    不可以用四则运算，就剩下位运算了。位运算对应的是二进制。5的二进制为101,17的二进制为10001，。
    第一步：各个位相加，不进位，结果为10100
    第二步：记下进位，最后一位相加产生过进位，进位为10
    第三步：把前面两步的结果相加：10100+10=10110
    可以看出，三步走的策略对二进制也适用。
    
    下面试着将二进制的加法转换为位运算。
    第一步中不考虑进位每一位相加：0+0=0,  1+1=0,  1+0=1.  可以看出，这个结果和异或的结果是一样的。
    第二步进位，对0+1， 1+0， 0+0而言都不会有进位，只有当1+1时才会有进位。此时我们可以想象是两个数先做位与运算，然后再左移
              一位。当两个数都是1的时候，位与得到的结果是1，其他位鬧0
    第三步，将前面两个步骤的结果相加。
'''


def ADD_1(n1, n2):
    carry = 1
    while carry:
        sum = n1 ^ n2
        carry = ((n1 & n2) << 1)
        n1 = sum
        n2 = carry

    return n1


print ADD_1(5, 17)
